#
# We define two job groups: one to bootstrap and one to build+test
#

- project:
    name: Fabrique
    jobs:
      - bootstrap
      - build

- job-group:
    name: 'bootstrap'
    jobs: ['{prefix}bootstrap-{format}']
    format: [make, ninja]

- job-group:
    name: 'build'
    jobs: ['{prefix}{branch}']
    branch:
      - master


#
# Bootstrap via both Make and Ninja:
#

- job-template:
    name: '{prefix}bootstrap-{format}'

    properties:
      - github: {url: 'http://github.com/fabriquer/fabrique'}
      - wall-display: {text: 'Fabrique bootstrap ({format})'}

    scm:
      - git:
          url: http://github.com/fabriquer/fabrique
          branches: ['*/master']
          submodule: {disable: false}

    triggers: ['github']

    builders:
      - github-notifier
      - shell: 'cd bootstrap/{format} && ./bootstrap'

    publishers:
      - archive:
          artifacts: 'bootstrap/{format}/bin/fab,bootstrap/{format}/lib/fabrique/*'
      - scan-clang-warnings


#
# Use a bootstrapped Fabrique to build Fabrique:
#

- job-template:
    name: '{prefix}{branch}'

    properties:
      - github: {url: 'http://github.com/fabriquer/fabrique'}

    scm:
      - git:
          url: http://github.com/fabriquer/fabrique
          branches: ['*/{branch}']
          basedir: src
          submodule: {disable: false}

    triggers:
        reverse: {jobs: '{prefix}bootstrap-ninja'}

    builders:
      - github-notifier

      - copyartifact:
          project: '{prefix}bootstrap-ninja'
          which-build: last-successful
          fallback-to-last-successful: true

      - shell: rm -rf build && mkdir build && cd build && ../bootstrap/ninja/bin/fab ../src
      - shell: ninja -C build everything
      - shell: ninja -C build test || true

    publishers:
      - archive: {artifacts: 'build/bin/fab, build/lib/fabrique/*'}
      - publish-junit-results
      - scan-clang-warnings


#
# Default settings that apply to all jobs:
#
- defaults:
    name: global
    project-type: freestyle
    block-downstream: false
    block-upstream: false
    prefix: 'Fabrique/'


#
# Custom properties:
#

- property:
    name: wall-display
    properties:
      - raw:
          xml: |
            <de.pellepelster.jenkins.walldisplay.WallDisplayJobProperty>
              <wallDisplayName>{text}</wallDisplayName>
            </de.pellepelster.jenkins.walldisplay.WallDisplayJobProperty>


#
# Post-build publishers:
#

- publisher:
    name: scan-clang-warnings
    publishers:
      - warnings:
          console-log-parsers: ['Clang (LLVM based)']

- publisher:
    name: publish-junit-results
    publishers:
      - junit: {results: 'build/junit.xml'}
